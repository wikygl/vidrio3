package crystal.crystal.tallerimport android.annotation.SuppressLintimport android.os.Bundleimport android.view.Viewimport android.widget.Toastimport androidx.appcompat.app.AppCompatActivityimport crystal.crystal.Rimport crystal.crystal.databinding.ActivityNovaApaBinding@Suppress("IMPLICIT_CAST_TO_ANY")class NovaApa : AppCompatActivity() {    private lateinit var binding: ActivityNovaApaBinding    @SuppressLint("SetTextI18n", "ResourceAsColor")    override fun onCreate(savedInstanceState: Bundle?) {        super.onCreate(savedInstanceState)        binding= ActivityNovaApaBinding.inflate(layoutInflater)        setContentView(binding.root)        cliente()        binding.u13layout.visibility = View.GONE        binding.u38layout.visibility = View.GONE        binding.ulayout.visibility = View.VISIBLE        binding.fcLayout.visibility =View.GONE        binding.btnCalcularNfcfs.setOnClickListener {            try {                val ancho = binding.med1Nfcfs.text.toString().toFloat()                val us = binding.ueditxtNfcfs.text.toString().toFloat()                val alto=binding.med2Nfcfs.text.toString().toFloat()                val hoja= binding.hojatxtNfcfsa.text.toString().toFloat()                //OPCIONES DE VISIBILIDAD                when (binding.ueditxtNfcfs.text.toString().toFloat()) {                    1f -> {                        binding.u13layout.visibility = View.GONE                        binding.u38layout.visibility = View.VISIBLE                        binding.ulayout.visibility = View.GONE                    }                    1.5f -> {                        binding.u13layout.visibility = View.VISIBLE                        binding.u38layout.visibility = View.GONE                        binding.ulayout.visibility = View.GONE                    }                    else -> {                        binding.u13layout.visibility = View.GONE                        binding.u38layout.visibility = View.GONE                        binding.ulayout.visibility = View.VISIBLE                    }                }                if (divisiones()==1){binding.hLayout.visibility=View.GONE}                else{binding.hLayout.visibility = View.VISIBLE}                if (divisiones()!=2){binding.angLayout.visibility= View.GONE}                else{binding.angLayout.visibility = View.VISIBLE}                if(alto<=hoja){binding.fcLayout.visibility=View.VISIBLE}                else{binding.fcLayout.visibility=View.GONE}                if (alto<=hoja){binding.mulLayout.visibility=View.GONE}                else{binding.mulLayout.visibility = View.VISIBLE}                if (alto<=hoja || nTe()<1){binding.tLayout.visibility=View.GONE}                else{binding.tLayout.visibility = View.VISIBLE}                if (nPuentes()==1){binding.tuboLayout.visibility= View.GONE}                else{binding.tuboLayout.visibility = View.VISIBLE}                dVisible()                //CALCULO DE MATERIALES                //CANAL U                //u otros                if (alto>hoja && us != 0F){binding.uxxtxtNfcfs.text= when {                    divisiones()==1 -> {"${df1(uFijos())} = 2\n" +                            "${df1(uParante())} =2\n" +                            "${df1(uMocheta())} = ${mochetaUParante()}"}                    (divisiones()==10||divisiones()==14)->{                        "${df1(uFijos())} = ${nFijos()}\n" +                                "${df1(uParante())} = ${fijoUParante()}\n" +                                "${df1(uMocheta())} = ${mochetaUParante()}\n" +                                "${df1(uSuperior())} = ${nPuentes()-1}\n" +                                "${df1(uSuperior2())} = ${nPuentes()-2}"}                    else -> {"${df1(uFijos())} = ${nFijos()}\n" +                            "${df1(uParante())} = ${fijoUParante()}\n" +                            "${df1(uMocheta())} = ${mochetaUParante()}\n"+                            "${df1(uSuperior())} = ${nPuentes()}"}}}                else if(alto>hoja && us == 0F){binding.uxxtxtNfcfs.text= when {                    divisiones()==1 -> {"${df1(uFijos())} = 2"}                    (divisiones()==10||divisiones()==14)->{                        "${df1(uFijos())} = ${nFijos()}\n" +                                "${df1(uSuperior())} = ${nPuentes()-1}\n" +                                "${df1(uSuperior2())} = ${nPuentes()-2}"}                    else -> {"${df1(uFijos())} = ${nFijos()}\n" +                            "${df1(uSuperior())} = ${nPuentes()}"}}}                else if(alto<=hoja && us != 0F){binding.uxxtxtNfcfs.text= when {                    divisiones()==1 -> {"${df1(uFijos())} = 2\n${df1(uParante())} =2"}                    else -> {"${df1(uFijos())} = ${nFijos()}\n${df1(uParante())} = ${fijoUParante()}"}}}                else{binding.uxxtxtNfcfs.text= when {                    divisiones()==1 -> {"${df1(uFijos())} = 2"}                    else -> {"${df1(uFijos())} = ${nFijos()}"}}}                //u 13                if (alto>hoja){binding.u13txtNfcfs.text= when {                    divisiones()==1 -> {"${df1(uFijos())} = 2\n${df1(uParante())} =2\n" +                            "${df1(uMocheta())} = ${mochetaUParante()}"}                    (divisiones()==10||divisiones()==14)->{                        "${df1(uFijos())} = ${nFijos()}\n" +                                "${df1(uParante())} = ${fijoUParante()}\n" +                                "${df1(uMocheta())} = ${mochetaUParante()}\n" +                                "${df1(uSuperior())} = ${nPuentes()-1}\n" +                                "${df1(uSuperior2())} = ${nPuentes()-2}"}                    else -> {"${df1(uFijos())} = ${nFijos()}\n${df1(uParante())} = ${fijoUParante()}\n" +                            "${df1(uMocheta())} = ${mochetaUParante()}\n${df1(uSuperior())} " +                            "= ${nPuentes()}"}}}                else{binding.u13txtNfcfs.text= when {                    divisiones()==1 -> {"${df1(uFijos())} = 2\n${df1(uParante())} =2"}                    else -> {"${df1(uFijos())} = ${nFijos()}\n${df1(uParante())} = ${fijoUParante()}"}}}                //u 3/8                if (alto>hoja){binding.u38txtNfcfs.text= when {                    divisiones()==1 -> {"${df1(uFijos())} = 2\n${df1(uParante())} =2\n" +                            "${df1(uMocheta())} = ${mochetaUParante()}"}                    (divisiones()==10||divisiones()==14)->{                        "${df1(uFijos())} = ${nFijos()}\n" +                                "${df1(uParante())} = ${fijoUParante()}\n" +                                "${df1(uMocheta())} = ${mochetaUParante()}\n" +                                "${df1(uSuperior())} = ${nPuentes()-1}\n" +                                "${df1(uSuperior2())} = ${nPuentes()-2}"}                    else -> {"${df1(uFijos())} = ${nFijos()}\n${df1(uParante())} = ${fijoUParante()}\n" +                            "${df1(uMocheta())} = ${mochetaUParante()}\n${df1(uSuperior())} =" +                            " ${nPuentes()}"}}}                else{binding.u38txtNfcfs.text= when {                    divisiones()==1 -> {"${df1(uFijos())} = 2\n${df1(uParante())} =2"}                    else -> {"${df1(uFijos())} = ${nFijos()}\n${df1(uParante())} = ${fijoUParante()}"}}}                // RIEL                if(divisiones()!=1){binding.rieltxtNfcfs.text = if (divisiones()==10||divisiones()==14){                    "${df1(uSuperior())} = ${nPuentes()-1}\n" +                            "${df1(uSuperior2())} = ${nPuentes()-2}"}                else{"${df1(uSuperior())} = ${nPuentes()}"}}                else{binding.rieltxtNfcfs.text = ""}                // MÚLTIPLE                binding.multitxtNfcfs.text = if (divisiones()==10||divisiones()==14){                    "${df1(uSuperior())} = ${nPuentes()-1}\n" +                            "${df1(uSuperior2())} = ${nPuentes()-2}"}                else{"${df1(uSuperior())} = ${nPuentes()}"}                // FIJO CORREDIZO                binding.fctxtNfcfs.text = if (divisiones()==10||divisiones()==14){                    "${df1(uSuperior())} = ${nPuentes()-1}\n" +                            "${df1(uSuperior2())} = ${nPuentes()-2}"}                else{"${df1(uSuperior())} = ${nPuentes()}"}                // HACHE                binding.hachetxtNfcfs.text = "${df1(hache())} = ${nCorredizas()}"                // PORTAFELPA                if(divisiones()!=1){binding.portxtNfcfs.text = "${df1(portafelpa())} = ${                    if (divisiones() % 2==0&&divisiones()<6){nCorredizas()*3}                    else if (divisiones() % 2==0&&divisiones()>6){divDePortas()}else{nCorredizas()*4}}"}                else{binding.portxtNfcfs.text = ""}                // TE                binding.angcortotxt.text = "${df1(te())} = ${nTe()}"                //ÁNGULO TOPE                binding.angtxtNfcfs.text= if (divisiones() == 2){"${df1(altoHoja()-0.3f)} = 1"}else{""}                //PARANTE                binding.paratxtNfcfs.text =if (divisiones() % 2==0&&divisiones()>=6)                {"${df1(parante())} = ${nPuentes()-1}"} else{""}                //VIDRIOS                binding.vidriotxtNfcfs.text = if(hoja<alto){if(divisiones()>1)                {"${vidriosFijos()}\n${vidrioCorre()}\n${vidrioMocheta()}"}                    else{"${vidriosFijos()}\n${vidrioMocheta()}"}}                else{if(divisiones()>1){"${vidriosFijos()}\n${vidrioCorre()}"}                    else{vidriosFijos()}}                // REFERENCIAS                binding.referenciasNfcfs.text="An: $ancho  x  Al: $alto\nAltura de puente:${                    df1(altoHoja())}\nDivisiones:" +                        " ${divisiones()} -> fjs: ${nFijos()};czs: ${nCorredizas()}"            } catch (e: Exception) {                Toast.makeText(this, "Ingrese dato válido", Toast.LENGTH_SHORT).show()}        }    }    @SuppressLint("SetTextI18n")    private fun cliente(){        binding.lyCliente.visibility=View.GONE        val paqueteR=intent.extras        //VARIABLES DE MATERIALES        var cliente= paqueteR?.getString("rcliente")        if (cliente!=null) {binding.tvTitulo.text= "nova aparente $cliente"}        else  {binding.tvTitulo.text= "nova aparente"}        binding.tvTitulo.setOnClickListener {            binding.lyCliente.visibility=View.VISIBLE            binding.clienteEditxt.setText("$cliente")            binding.btGo.setOnClickListener {                cliente = binding.clienteEditxt.text.toString()                binding.tvTitulo.text="nova aparente $cliente"                binding.lyCliente.visibility=View.GONE }        }    }    private fun dVisible() {        val alto = divisiones().toString()        val hoja = if (siNoMoch()==1){""}else{"c"}.toString()        val div = "$alto$hoja"        binding.f3.setImageResource(when(div){            "1"-> R.drawable.ic_fichad1a  "1c"-> R.drawable.ic_fichad1            "2"-> R.drawable.ic_fichad2a   "2c"->R.drawable.ic_fichad2c            "3"-> R.drawable.ic_fichad3a   "3c"-> R.drawable.ic_fichad3c            "4"-> R.drawable.ic_fichad4a   "4c"-> R.drawable.ic_fichad4c            "5"-> R.drawable.ic_fichad5a   "5c"-> R.drawable.ic_fichad5c            "6"-> R.drawable.ic_fichad6a   "6c"-> R.drawable.ic_fichad6c            "7"-> R.drawable.ic_fichad7a   "7c"-> R.drawable.ic_fichad7c            "8"-> R.drawable.ic_fichad8a   "8c"-> R.drawable.ic_fichad8c            "9"-> R.drawable.ic_fichad9a   "9c"-> R.drawable.ic_fichad9c            "10"-> R.drawable.ic_fichad10a "10c"-> R.drawable.ic_fichad10c            "11"-> R.drawable.ic_fichad11a "11c"-> R.drawable.ic_fichad11c            "12"-> R.drawable.ic_fichad12a "12c"-> R.drawable.ic_fichad12c            "13"-> R.drawable.ic_fichad13a "13c"-> R.drawable.ic_fichad13c            "14"-> R.drawable.ic_fichad14a "14c"-> R.drawable.ic_fichad14c            "15"-> R.drawable.ic_fichad15a "15c"-> R.drawable.ic_fichad15c            else -> {                R.drawable.ic_fichad5            }        })    }    // FUNCIONES REDONDEOS    private fun df1(defo: Float): String {        val resultado =if ("$defo".endsWith(".0")) {"$defo".replace(".0", "")}        else { "%.1f".format(defo)        }        return resultado.replace(",", ".")    }    // FUNCIONES DATOS    private fun cruce(): Float {        val exacto = binding.etCruce.text.toString().toFloat()        val cruce = 0.7f        return if (exacto == 0f) {cruce} else {exacto}    }    // FUNCIONES U    private fun uFijos(): Float {        val ancho = binding.med1Nfcfs.text.toString().toFloat()        val cruce = when(divisiones()){            2,3,5,7,9,11,13,15 -> divisiones()-1            4,6,10 -> divisiones()-2            8,12 -> divisiones()/2            14 -> divisiones()-4            else -> divisiones()-1}*cruce()        val partes= ((ancho-(2.5*(nPuentes()-1)))+cruce)/divisiones()        return if (divisiones()==1){ancho}else{partes.toFloat()}    }    private fun uParante():Float {        val us = binding.ueditxtNfcfs.text.toString().toFloat()        return altoHoja()-(us+0.2f)    }    private fun uMocheta():Float {        val us = binding.ueditxtNfcfs.text.toString().toFloat()        return altoMocheta()-(us)    }    private fun uSuperior(): Float {        return mPuentes1()    }    private fun uSuperior2(): Float {        return mPuentes2()    }    // FUNCIONES otros perfiles    private fun portafelpa():Float {        return altoHoja()-1.6f    }    private fun hache():Float {        return uFijos()    }    private fun te():Float {        val us = binding.ueditxtNfcfs.text.toString().toFloat()        return altoMocheta()-(us)    }    private fun nTe():Int{       return when{            divisiones()%2 !=0 || divisiones()<6 -> nVidriosMoch()-1            divisiones() == 6 || divisiones()== 8 -> nVidriosMoch()-2            divisiones() == 10 || divisiones() == 14 -> (nVidriosMoch()-2)+(nVidriosMoch2()-1)            divisiones() == 12 -> (nVidriosMoch()-3)            else -> {0}        }    }    private fun parante(): Float {        return binding.med2Nfcfs.text.toString().toFloat()    }    //FUNCIONES vidrios    private fun vidriosFijos():String{        val alto=altoHoja()        val us = binding.ueditxtNfcfs.text.toString().toFloat()        val holgura = if (us==0f){1f}else{0.2f}        return when {            divisiones()==1-> {"${df1(uFijos()-0.6f)} x ${df1(alto-(us+holgura))} = " +                    "${nFijos()}"}            divisiones()<5 -> {"${df1(uFijos()-0.4f)} x ${df1(alto-(us+holgura))} = " +                    "${nFijos()}"}            divisiones()%2==0 && divisiones()<14 -> {"${df1(uFijos()-0.4f)} x " +                    "${df1(alto-(us+holgura))} = ${nFijos()}"}            divisiones()==14 -> {"${df1(uFijos()-0.4f)} x ${df1(alto-(us+holgura))} = 6\n" +                    "${df1(uFijos())} x ${df1(alto-(us+holgura))} = 2"}            else -> {"${df1(uFijos()-0.4f)} x ${df1(alto-(us+holgura))} = 2\n" +                    "${df1(uFijos())} x ${df1(alto-(us+holgura))}= ${nFijos()-2}"}}    }    private fun vidrioCorre():String {        return "${df1(hache()-1.4f)} x ${df1(altoHoja()-3.5f)} = ${nCorredizas()}"    }    private fun vidrioMocheta():String {        return if(divisiones()==1){df1(vAnchoMocheta1()) +                " x ${df1(vAltoMocheta())} = ${anchMota()}"}        else if (divisiones()==10||divisiones()==14){"${df1(vAnchoMocheta1())} x ${            df1(vAltoMocheta())} = ${nVidriosMoch()}\n" +                "${df1(vidrioAnchoMocheta2())} x ${                    df1(vAltoMocheta())} = ${nVidriosMoch2()}"}        else{"${df1(vAnchoMocheta1())} x ${            df1(vAltoMocheta())} = ${nVidriosMoch()}"}    }    private fun vAltoMocheta():Float {        val holgura=0.36f        return altoMocheta()-holgura    }    private fun vAnchoMocheta1():Float {        val holgura=if(divisiones()%2==0){((nVidriosMoch()+1)*0.36f)/2}else{(nVidriosMoch()+1)*0.36f}        return (mPuentes1()-holgura)/anchMota()    }    private fun vidrioAnchoMocheta2():Float {        val holgura=(nVidriosMoch2()+1)*0.36f        return (mPuentes2()-holgura)/anchMota2()    }    private fun nVidriosMoch(): Int {        return if (divisiones() == 2 && divisiones() == 4) {anchMota()}        else if (divisiones() % 2 == 0 && divisiones() >= 6 && divisiones() < 10) {anchMota() * 2}        else if (divisiones() == 12) {anchMota() * 3}        else if (divisiones() == 10 || divisiones() == 14) {anchMota() * 2}        else {anchMota()}    }    private fun nVidriosMoch2(): Int {        return if (divisiones() == 10 || divisiones() == 14) {anchMota2()}        else {1}    }    //FUNCIONES CONSTANTES    private fun altoMocheta():Float {        val alto= binding.med2Nfcfs.text.toString().toFloat()        val hoja= binding.hojatxtNfcfsa.text.toString().toFloat()        return if (hoja==0f){(alto/7*2)-1.5f}else if(hoja==alto){alto}else{(alto-hoja)-1.5f}    }    private fun anchMota(): Int {        return when (mPuentes1()) {            in 0.0..180.0 -> 1            in 180.0..360.0 -> 2            in 360.0..540.0 -> 3            in 540.0..720.0 -> 4            in 720.0..900.0 -> 5            else -> 0}    }    private fun anchMota2(): Int {        return when (mPuentes2()) {            in 0.0..180.0 -> 1            in 180.0..360.0 -> 2            in 360.0..540.0 -> 3            in 540.0..720.0 -> 4            in 720.0..900.0 -> 5            else -> 0}    }    private fun altoHoja():Float {        val alto=binding.med2Nfcfs.text.toString().toFloat()        val hoja= binding.hojatxtNfcfsa.text.toString().toFloat()        val corre = if (hoja>alto){alto}else{hoja}        return if (hoja==0f){alto/7*5}else{corre}    }    private fun siNoMoch(): Int {        val alto = binding.med2Nfcfs.text.toString().toFloat()        val hoja = binding.hojatxtNfcfsa.text.toString().toFloat()        return if (hoja >= alto) {0} else {1}    }    private fun divisiones(): Int {        val ancho = binding.med1Nfcfs.text.toString().toFloat()        val divis = binding.partesNfcfs.text.toString().toInt()        return if (divis == 0) {            when {                ancho <= 60 -> 1                ancho in 60.0..120.0 -> 2                ancho in 120.0..180.0 -> 3                ancho in 180.0..240.0 -> 4                ancho in 240.0..300.0 -> 5                ancho in 300.0..360.0 -> 6                ancho in 360.0..420.0 -> 7                ancho in 420.0..480.0 -> 8                ancho in 480.0..540.0 -> 9                ancho in 540.0..600.0 -> 10                ancho in 600.0..660.0 -> 11                ancho in 660.0..720.0 -> 12                ancho in 720.0..780.0 -> 13                ancho in 780.0..840.0 -> 14                ancho in 840.0..900.0 -> 15                else -> divis            }} else {divis}    }    private fun divDePortas(): Int {        return when (divisiones()){            1 ->0            2,4,8,12 -> {nCorredizas()*3}            14 -> {(nCorredizas()*4)-2}            else->{nCorredizas()*4}        }    }    private fun nFijos():Int {        return when (divisiones()){            1 -> 1  2 -> 1            3 -> 2  4 -> 2            5 -> 3            6 -> 4  7 -> 4            8 -> 4            9 -> 5            10 ->6  11 -> 6  12 -> 6            13 ->7  14 ->8   15 -> 8            else -> 0        }    }    private fun nCorredizas():Int {        return when (divisiones()){            1 -> 0            2 -> 1   3 -> 1            4 -> 2   5 -> 2   6 -> 2            7 -> 3            8 -> 4   9 -> 4   10 -> 4            11-> 5            12-> 6   13-> 6   14 -> 6            15-> 7            else -> 0        }    }    private fun fijoUParante():Int{        return when (divisiones()){            1 -> 2   2 -> 1   3 -> 2    4 -> 2    5 -> 2            6 -> 4   7 -> 2   8 -> 4    9 -> 2    10 -> 6            11 -> 2  12 -> 6  13 -> 2   14 -> 6   15 -> 2            else -> 0        }    }    private fun mochetaUParante():Int {        return when (divisiones()){            1 -> 2   2 -> 2   3 -> 2    4 -> 2    5 -> 2            7 -> 2   9 -> 2   11 -> 2   13 -> 2   15 -> 2            6 -> 4   8 -> 4   10 -> 6   12 -> 6   14 -> 6            else -> 0        }    }    private fun nPuentes():Int {        return when (divisiones()){            1 -> 1   2 -> 1   3 -> 1    4 -> 1    5 -> 1            7 -> 1   9 -> 1   11 -> 1   13 -> 1   15 -> 1            6 -> 2   8 -> 2  10 -> 3   12 -> 3   14 -> 3            else -> 0        }    }    private fun mPuentes1():Float {        val ancho = binding.med1Nfcfs.text.toString().toFloat()        val parantes=2.5f        return when (divisiones()){            1 -> ancho   2 -> ancho   3 -> ancho    4 -> ancho    5 -> ancho            7 -> ancho  9 -> ancho   11 -> ancho   13 -> ancho   15 -> ancho            6 -> (ancho-parantes)/2   8 -> (ancho-parantes)/2  10 -> (ancho-(2*parantes))/divisiones()*3            12 -> (ancho-(2*parantes))/3   14 -> (ancho-(2*parantes))/divisiones()*5            else -> 0f        }    }    private fun mPuentes2():Float {        val ancho = binding.med1Nfcfs.text.toString().toFloat()        val parantes=2.5f        return when (divisiones()){            10 -> (ancho-(2*parantes))/divisiones()*4            14 -> (ancho-(2*parantes))/divisiones()*4            else -> 0f        }    }}